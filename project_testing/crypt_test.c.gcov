        -:    0:Source:crypt_test.c
        -:    0:Graph:crypt_test.gcno
        -:    0:Data:crypt_test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "mbedtls/aes.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <sys/types.h>
        -:    6:#include <unistd.h>
        -:    7:#include <ctype.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define CIPHERTEXT_LEN 1024
        -:   11:#define MAX_LINE 1024
        -:   12:#define KEY_LEN 16
        -:   13:#define IV_LEN 16
        -:   14:
        1:   15:char *sliceString(char *str, int start, int end)
        -:   16:{
        -:   17:
        -:   18:    int i;
        1:   19:    int size = (end - start);
        1:   20:    char *output = (char *)malloc(size * sizeof(char));
        -:   21:
       18:   22:    for (i = 0; start <= end; start++, i++)
        -:   23:    {
       17:   24:        output[i] = str[start];
       17:   25:    }
        -:   26:
        1:   27:    output[size] = '\0';
        -:   28:
        1:   29:    return output;
        -:   30:}
        -:   31:
    #####:   32:int copyArr(unsigned char iv1[], unsigned char iv2[], int size)
        -:   33:{
    #####:   34:    for (int i = 0; i < size; i++)
        -:   35:    {
    #####:   36:        iv2[i] = iv1[i];
    #####:   37:    }
    #####:   38:    return 0;
        -:   39:}
        1:   40:int checkResult(unsigned char *decipher, unsigned char *text)
        -:   41:{
        1:   42:    if (memcmp(decipher, text, sizeof(decipher)) != 0)
        -:   43:    {
        1:   44:        printf("error\n");
        1:   45:        printf("Expected: %s\n", text);
        1:   46:        printf("Actual: %s\n", decipher);
        -:   47:        // assert(memcmp(decipher, text, sizeof(decipher)) == 0);
        1:   48:        exit(EXIT_FAILURE);
        -:   49:    }
    #####:   50:}
        -:   51:
    #####:   52:static int aesCbc(unsigned char key[], unsigned char key2[], unsigned char iv[], unsigned char iv1[], unsigned char text[], int numBytes)
        -:   53:{
    #####:   54:    printf("aes_cbc()\n");
        -:   55:    mbedtls_aes_context aes;
        -:   56:    mbedtls_aes_context aes2;
    #####:   57:    mbedtls_aes_init(&aes);
    #####:   58:    mbedtls_aes_init(&aes2);
    #####:   59:    unsigned char *ciphered = calloc(1, (sizeof(unsigned char) * CIPHERTEXT_LEN));
    #####:   60:    unsigned char *decipher = calloc(1, (sizeof(unsigned char) * MAX_LINE));
    #####:   61:    int success = mbedtls_aes_setkey_enc(&aes, key, (unsigned int)(KEY_LEN * 8));
    #####:   62:    if (success != 0)
        -:   63:    {
    #####:   64:        printf("Failed to init key\n");
    #####:   65:        exit(EXIT_FAILURE);
        -:   66:    }
    #####:   67:    success = mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, numBytes, iv, text, ciphered);
    #####:   68:    if (success != 0)
        -:   69:    {
    #####:   70:        printf("Failed to encrypt\n");
    #####:   71:        exit(EXIT_FAILURE);
        -:   72:    }
    #####:   73:    printf("Ciphertext: %s\n", ciphered);
    #####:   74:    success = mbedtls_aes_setkey_dec(&aes2, key2, (unsigned int)(KEY_LEN * 8));
    #####:   75:    if (success != 0)
        -:   76:    {
    #####:   77:        printf("Failed to init dec key\n");
    #####:   78:        exit(EXIT_FAILURE);
        -:   79:    }
    #####:   80:    success = mbedtls_aes_crypt_cbc(&aes2, MBEDTLS_AES_DECRYPT, strlen((const char *)ciphered), iv1, ciphered, decipher);
    #####:   81:    if (success != 0)
        -:   82:    {
    #####:   83:        printf("Failed to decrypt\n");
    #####:   84:        exit(EXIT_FAILURE);
        -:   85:    }
    #####:   86:    printf("Deciphered: %s\n", decipher);
    #####:   87:    mbedtls_aes_free(&aes);
    #####:   88:    mbedtls_aes_free(&aes2);
    #####:   89:    checkResult(decipher, text);
    #####:   90:    free(ciphered);
    #####:   91:    free(decipher);
    #####:   92:    printf("exiting aesCbc()\n\n");
    #####:   93:    return EXIT_SUCCESS;
        -:   94:}
        1:   95:static int aesEcb(unsigned char key[], unsigned char key2[], unsigned char text[], int numBytes)
        -:   96:{
        1:   97:    printf("aes_ecb()\n");
        -:   98:    mbedtls_aes_context aes;
        -:   99:    mbedtls_aes_context aes2;
        1:  100:    mbedtls_aes_init(&aes);
        1:  101:    mbedtls_aes_init(&aes2);
        -:  102:
        1:  103:    unsigned char *ciphered = calloc(1, (sizeof(unsigned char) * CIPHERTEXT_LEN));
        1:  104:    unsigned char *decipher = calloc(1, (sizeof(unsigned char) * MAX_LINE));
        1:  105:    int success = mbedtls_aes_setkey_enc(&aes, key, KEY_LEN * 8);
        1:  106:    if (success != 0)
        -:  107:    {
    #####:  108:        printf("Failed to init key\n");
    #####:  109:        exit(EXIT_FAILURE);
        -:  110:    }
        1:  111:    success = mbedtls_aes_crypt_ecb(&aes, MBEDTLS_AES_ENCRYPT, text, ciphered);
        1:  112:    if (success != 0)
        -:  113:    {
    #####:  114:        printf("Failed to encrypt\n");
    #####:  115:        exit(EXIT_FAILURE);
        -:  116:    }
        1:  117:    printf("Ciphertext: %s\n", ciphered);
        1:  118:    mbedtls_aes_setkey_dec(&aes2, key2, KEY_LEN * 8);
        1:  119:    if (success != 0)
        -:  120:    {
    #####:  121:        printf("Failed to init dec key\n");
    #####:  122:        exit(EXIT_FAILURE);
        -:  123:    }
        1:  124:    success = mbedtls_aes_crypt_ecb(&aes2, MBEDTLS_AES_DECRYPT, ciphered, decipher);
        1:  125:    if (success != 0)
        -:  126:    {
    #####:  127:        printf("Failed to decrypt\n");
    #####:  128:        exit(EXIT_FAILURE);
        -:  129:    }
        1:  130:    printf("Deciphered: %s\n", decipher);
        1:  131:    char *texttest = sliceString((char *)text, 0, 16);
        1:  132:    mbedtls_aes_free(&aes);
        1:  133:    mbedtls_aes_free(&aes2);
        1:  134:    checkResult(decipher, texttest);
        1:  135:    free(ciphered);
        1:  136:    free(decipher);
        1:  137:    printf("exiting aesEcb()\n\n");
        1:  138:    return EXIT_SUCCESS;
        -:  139:}
        -:  140:
    #####:  141:static int aesCfb128(unsigned char key[], unsigned char iv[], unsigned char text[], int numBytes)
        -:  142:{
    #####:  143:    printf("aesCfb128()\n");
        -:  144:    unsigned char iv1[IV_LEN];
    #####:  145:    copyArr(iv, iv1, IV_LEN);
        -:  146:    mbedtls_aes_context aes;
    #####:  147:    mbedtls_aes_init(&aes);
    #####:  148:    unsigned char *ciphered = calloc(1, (sizeof(unsigned char) * CIPHERTEXT_LEN));
    #####:  149:    unsigned char *decipher = calloc(1, (sizeof(unsigned char) * MAX_LINE));
    #####:  150:    size_t *iv_off = calloc(1, sizeof(size_t));
    #####:  151:    *iv_off = 0;
        -:  152:
    #####:  153:    int success = mbedtls_aes_setkey_enc(&aes, key, KEY_LEN * 8);
    #####:  154:    if (success != 0)
        -:  155:    {
    #####:  156:        printf("Failed to init key\n");
    #####:  157:        exit(EXIT_FAILURE);
        -:  158:    }
    #####:  159:    success = mbedtls_aes_crypt_cfb128(&aes, MBEDTLS_AES_ENCRYPT, numBytes, iv_off, iv, (const char *)text, ciphered);
    #####:  160:    if (success != 0)
        -:  161:    {
    #####:  162:        printf("Failed to encrypt\n");
    #####:  163:        exit(EXIT_FAILURE);
        -:  164:    }
    #####:  165:    printf("Ciphertext: %s\n", ciphered);
    #####:  166:    success = mbedtls_aes_crypt_cfb128(&aes, MBEDTLS_AES_DECRYPT, strlen((const char *)ciphered), iv_off, iv1, (const char *)ciphered, decipher);
    #####:  167:    if (success != 0)
        -:  168:    {
    #####:  169:        printf("Failed to dec\n");
    #####:  170:        exit(EXIT_FAILURE);
        -:  171:    }
    #####:  172:    printf("Deciphered: %s\n", decipher);
    #####:  173:    mbedtls_aes_free(&aes);
    #####:  174:    checkResult(decipher, text);
    #####:  175:    free(iv_off);
    #####:  176:    free(ciphered);
    #####:  177:    free(decipher);
    #####:  178:    printf("exiting aesCfb128()\n\n");
    #####:  179:    return EXIT_SUCCESS;
        -:  180:}
        -:  181:
    #####:  182:static int aesCtr(unsigned char key[], unsigned char iv[], unsigned char text[], int numBytes)
        -:  183:{
    #####:  184:    printf("aesCtr()\n");
        -:  185:    mbedtls_aes_context aes;
    #####:  186:    mbedtls_aes_init(&aes);
        -:  187:    unsigned char ciphered[CIPHERTEXT_LEN];
        -:  188:    unsigned char decipher[MAX_LINE];
    #####:  189:    int success = mbedtls_aes_setkey_enc(&aes, key, KEY_LEN * 8);
    #####:  190:    if (success != 0)
        -:  191:    {
    #####:  192:        printf("Failed to init key\n");
    #####:  193:        exit(EXIT_FAILURE);
        -:  194:    }
    #####:  195:    unsigned char nonce_counter[16] = {0};
        -:  196:    unsigned char stream_block[16];
    #####:  197:    unsigned char nonce_counter1[16] = {0};
        -:  198:    unsigned char stream_block1[16];
    #####:  199:    size_t nc_off = 0;
    #####:  200:    size_t nc_off1 = 0;
    #####:  201:    success = mbedtls_aes_crypt_ctr(&aes, numBytes, &nc_off, nonce_counter, stream_block, text, ciphered);
    #####:  202:    if (success != 0)
        -:  203:    {
    #####:  204:        printf("Failed to encrypt\n");
    #####:  205:        exit(EXIT_FAILURE);
        -:  206:    }
    #####:  207:    printf("Ciphertext: %s\n", ciphered);
    #####:  208:    success = mbedtls_aes_crypt_ctr(&aes, strlen((const char *)ciphered), &nc_off1, nonce_counter1, stream_block1, ciphered, decipher);
    #####:  209:    if (success != 0)
        -:  210:    {
    #####:  211:        printf("Failed to decrypt\n");
    #####:  212:        exit(EXIT_FAILURE);
        -:  213:    }
    #####:  214:    printf("Deciphered: %s\n", decipher);
    #####:  215:    mbedtls_aes_free(&aes);
    #####:  216:    checkResult(decipher, text);
    #####:  217:    printf("exiting aesCtr()\n\n");
    #####:  218:    return EXIT_SUCCESS;
        -:  219:}
        -:  220:
        1:  221:int main(int argc, char *argv[])
        -:  222:{
        -:  223:    // *(int *)0xdeadbeef = 37;
        1:  224:    if (argc > 3 || argc == 1)
        -:  225:    {
    #####:  226:        printf("Command argument syntax err.\n");
    #####:  227:        printf("Eg: ./crypt_test ./plain.txt ./options.txt\n");
    #####:  228:        printf("Eg: ./crypt_test ./plain + options.txt\n");
    #####:  229:    }
        1:  230:    printf("\nStarted main function\n");
        -:  231:    // declare the variables
        -:  232:    long numBytes;
        -:  233:    unsigned char *text;
        -:  234:    unsigned char *cipher;
        -:  235:    unsigned char *key;
        -:  236:    unsigned char *key2;
        -:  237:    unsigned char *iv;
        -:  238:    unsigned char *iv2;
        -:  239:
        1:  240:    if (argc == 3)
        -:  241:    {
    #####:  242:        char *path = argv[1];
    #####:  243:        FILE *file = fopen(path, "r");
    #####:  244:        if (!file)
        -:  245:        {
    #####:  246:            perror(path);
    #####:  247:            exit(EXIT_FAILURE);
        -:  248:        }
    #####:  249:        printf("Reading plain text file at %s\n", path);
        -:  250:
        -:  251:        // we are taking the whole file as a single string input
    #####:  252:        fseek(file, 0L, SEEK_END);
    #####:  253:        numBytes = ftell(file);
    #####:  254:        fseek(file, 0L, SEEK_SET);
    #####:  255:        text = (char *)calloc(numBytes, sizeof(char));
    #####:  256:        if (text == NULL)
        -:  257:        {
    #####:  258:            exit(EXIT_FAILURE);
        -:  259:        }
    #####:  260:        fread(text, sizeof(char), numBytes, file);
    #####:  261:        fclose(file);
        -:  262:
        -:  263:        // open options file
    #####:  264:        char *optionsPath = argv[2];
    #####:  265:        FILE *optionsFile = fopen(optionsPath, "r");
    #####:  266:        printf("Reading options file at %s\n", optionsPath);
    #####:  267:        if (!optionsFile)
        -:  268:        {
    #####:  269:            perror(optionsPath);
    #####:  270:            exit(EXIT_FAILURE);
        -:  271:        }
    #####:  272:        char *line_buf = NULL;
    #####:  273:        int line_count = 0;
    #####:  274:        size_t bufsize = 32;
        -:  275:        size_t characters;
        -:  276:        unsigned char *cipherArr[MAX_LINE];
        -:  277:        unsigned char *keyArr[MAX_LINE];
        -:  278:        unsigned char *keyArr2[MAX_LINE];
        -:  279:        unsigned char *ivArr[MAX_LINE];
        -:  280:        unsigned char *ivArr2[MAX_LINE];
        -:  281:        // get first three lines to get the three options, cipher, iv1, iv2
    #####:  282:        characters = getline(&line_buf, &bufsize, optionsFile);
    #####:  283:        strcpy((char *)cipherArr, line_buf);
    #####:  284:        characters = getline(&line_buf, &bufsize, optionsFile);
    #####:  285:        strcpy((char *)keyArr, line_buf);
    #####:  286:        characters = getline(&line_buf, &bufsize, optionsFile);
    #####:  287:        strcpy((char *)keyArr2, line_buf);
    #####:  288:        characters = getline(&line_buf, &bufsize, optionsFile);
    #####:  289:        strcpy((char *)ivArr, line_buf);
    #####:  290:        characters = getline(&line_buf, &bufsize, optionsFile);
    #####:  291:        strcpy((char *)ivArr2, line_buf);
        -:  292:        // trash
    #####:  293:        free(line_buf);
    #####:  294:        line_buf = NULL;
        -:  295:
        -:  296:        // drop the line break and assign the values to the global variables.
    #####:  297:        cipher = strtok((char *)cipherArr, "\n");
    #####:  298:        key = strtok((char *)keyArr, "\n");
    #####:  299:        key2 = strtok((char *)keyArr2, "\n");
    #####:  300:        iv = strtok((char *)ivArr, "\n");
    #####:  301:        iv2 = strtok((char *)ivArr2, "\n");
    #####:  302:    }
        1:  303:    else if (argc == 2)
        -:  304:    {
        -:  305:        // only one file contain all values.
        -:  306:        // open combined file
        1:  307:        char *path = argv[1];
        1:  308:        FILE *file = fopen(path, "r");
        1:  309:        printf("Reading options file at %s\n", path);
        1:  310:        if (!file)
        -:  311:        {
    #####:  312:            perror(path);
    #####:  313:            return EXIT_FAILURE;
        -:  314:        }
        -:  315:        // get plaintext
        1:  316:        fseek(file, 0L, SEEK_END);
        1:  317:        numBytes = ftell(file);
        1:  318:        fseek(file, 0L, SEEK_SET);
        1:  319:        text = (char *)calloc(numBytes, sizeof(char));
        1:  320:        fread(text, sizeof(char), numBytes, file);
        1:  321:        fclose(file);
        -:  322:        // printf("%s\n",text);
        -:  323:        // printf("%d\n",(int)strlen(text));
        1:  324:        const char *needle = "\nendplain\n";
        1:  325:        char *pos = strstr(text, needle);
        1:  326:        if (pos == NULL)
        -:  327:        {
    #####:  328:            printf("error in seed file\n");
    #####:  329:            return 1;
        -:  330:        }
        1:  331:        *pos = '\0';
        1:  332:        printf("%s\n", text);
        -:  333:
        -:  334:        // get ops
        1:  335:        char *optext = pos + strlen(needle);
        1:  336:        printf("%s\n", optext);
        -:  337:        // options
        1:  338:        cipher = strtok(optext, "\n");
        1:  339:        key = strtok(NULL, "\n");
        1:  340:        key2 = strtok(NULL, "\n");
        1:  341:        iv = strtok(NULL, "\n");
        1:  342:        iv2 = strtok(NULL, "\n");
        -:  343:
        1:  344:        printf("exiting reading of file block\n");
        1:  345:    }
        1:  346:    numBytes = (int)strlen(text);
        1:  347:    printf("Plain: %s \nPlaintext size: %d\n", text, (int)numBytes);
        1:  348:    printf("Cipher: %s\n", cipher);
        1:  349:    printf("Key: %s\nKeysize: %d\n", key, (int)strlen(key));
        1:  350:    printf("IV: %s\nivSize: %d\n\n", iv, (int)strlen(iv));
        1:  351:    printf("IV2: %s\nivSize: %d\n\n", iv2, (int)strlen(iv));
        -:  352:
        1:  353:    if (strcmp(cipher, "CBC") == 0)
        -:  354:    {
    #####:  355:        aesCbc(key, key2, iv, iv2, text, numBytes);
    #####:  356:    }
        1:  357:    else if (strcmp(cipher, "ECB") == 0)
        -:  358:    {
        1:  359:        aesEcb(key, key2, text, numBytes);
        1:  360:    }
    #####:  361:    else if (strcmp(cipher, "CTR") == 0)
        -:  362:    {
    #####:  363:        aesCtr(key, iv, text, numBytes);
    #####:  364:    }
    #####:  365:    else if (strcmp(cipher, "CFB128") == 0)
        -:  366:    {
    #####:  367:        aesCfb128(key, iv, text, numBytes);
    #####:  368:    }
        -:  369:    else // cipher was not recognised
        -:  370:    {
    #####:  371:        printf("cipher code not recognised");
        -:  372:        // assert(1 == 0);
    #####:  373:        return EXIT_FAILURE;
        -:  374:    }
        1:  375:    printf("exit successfully\n");
        1:  376:    return EXIT_SUCCESS;
        1:  377:}
